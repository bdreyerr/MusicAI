//
//  MidiClipEditorContainerView.swift
//  music.ai.frontend
//
//  Created by Ben Dreyer on 3/23/25.
//

import SwiftUI

struct MidiClipEditorContainerView: View {
    @EnvironmentObject var themeManager: ThemeManager
    @StateObject var midiEditorViewModel = MidiEditorViewModel()
    
    // MIDI clip to be edited
    var midiClip: MidiClip?
    
    // Scroll position state
    @State private var verticalScrollOffset: CGFloat = 0
    @State private var currentBeatPosition: Double = 0 // Track current visible position in beats
    @State private var isUserScrolling: Bool = false   // Track if user is manually scrolling
    @State private var hasScrolledToInitialPosition: Bool = false // Track if initial scroll has happened
    
    // Namespace for scroll view
    @Namespace private var scrollNamespace
    
    // Constants for layout
    private let pianoRollWidth: CGFloat = 100
    private let velocityEditorHeight: CGFloat = 60
    private let controlsHeight: CGFloat = 30
    
    var body: some View {
        GeometryReader { geometry in
            ZStack {
                VStack(spacing: 0) {
                    // Top control area with zoom and grid controls
                    HStack {
                        // Zoom controls
                        HStack(spacing: 4) {
                            Button(action: midiEditorViewModel.zoomOut) {
                                Image(systemName: "minus.magnifyingglass")
                                    .foregroundColor(themeManager.primaryTextColor)
                            }
                            .buttonStyle(BorderlessButtonStyle())
                            .disabled(midiEditorViewModel.zoomLevel <= 0)
                            .padding(.horizontal, 4)
                            
                            Text("Zoom: \(midiEditorViewModel.zoomLevel + 1)/\(midiEditorViewModel.zoomMultipliers.count)")
                                .font(.system(size: 10))
                                .foregroundColor(themeManager.secondaryTextColor)
                            
                            Button(action: midiEditorViewModel.zoomIn) {
                                Image(systemName: "plus.magnifyingglass")
                                    .foregroundColor(themeManager.primaryTextColor)
                            }
                            .buttonStyle(BorderlessButtonStyle())
                            .disabled(midiEditorViewModel.zoomLevel >= midiEditorViewModel.zoomMultipliers.count - 1)
                            .padding(.horizontal, 4)
                        }
                        
                        Spacer()
                        
                        // Horizontal zoom controls for the grid
                        HStack(spacing: 4) {
                            Button(action: midiEditorViewModel.horizontalZoomOut) {
                                Image(systemName: "minus.rectangle")
                                    .foregroundColor(themeManager.primaryTextColor)
                            }
                            .buttonStyle(BorderlessButtonStyle())
                            .disabled(midiEditorViewModel.horizontalZoomLevel <= 0)
                            .padding(.horizontal, 4)
                            
                            Text("Beat: \(String(format: "%.1fx", midiEditorViewModel.horizontalZoomMultipliers[midiEditorViewModel.horizontalZoomLevel]))")
                                .font(.system(size: 10))
                                .foregroundColor(themeManager.secondaryTextColor)
                                .frame(width: 50, alignment: .center)
                            
                            Button(action: midiEditorViewModel.horizontalZoomIn) {
                                Image(systemName: "plus.rectangle")
                                    .foregroundColor(themeManager.primaryTextColor)
                            }
                            .buttonStyle(BorderlessButtonStyle())
                            .disabled(midiEditorViewModel.horizontalZoomLevel >= midiEditorViewModel.horizontalZoomMultipliers.count - 1)
                            .padding(.horizontal, 4)
                        }
                        
                        // Grid division selection
                        HStack(spacing: 4) {
                            Text("Grid:")
                                .font(.system(size: 10))
                                .foregroundColor(themeManager.secondaryTextColor)
                            
                            Picker("", selection: $midiEditorViewModel.gridDivision) {
                                ForEach(MidiEditorViewModel.GridDivision.allCases, id: \.self) { division in
                                    Text(division.label)
                                        .font(.system(size: 10))
                                        .tag(division)
                                }
                            }
                            .pickerStyle(MenuPickerStyle())
                            .frame(width: 60)
                            .labelsHidden()
                        }
                        .padding(.horizontal, 8)
                    }
                    .padding(.horizontal, 8)
                    .frame(height: controlsHeight)
                    .background(themeManager.tertiaryBackgroundColor)
                
                    // Main content area with piano roll and grid in shared scroll view
                    ScrollViewReader { verticalProxy in
                        ScrollView(.vertical, showsIndicators: true) {
                            HStack(spacing: 0) {
                                // Piano roll keys with top label placeholder
                                VStack(spacing: 0) {
                                    // Top-left empty space to align with ruler
                                    Rectangle()
                                        .fill(themeManager.tertiaryBackgroundColor)
                                        .frame(height: controlsHeight)
                                        .border(themeManager.secondaryBorderColor, width: 0.5)
                                    
                                    // Piano roll keys
                                    PianoRollKeysOnly(
                                        viewModel: midiEditorViewModel, midiClip: midiClip
                                    )
                                    .overlay(
                                        // Add scroll position markers for each note
                                        GeometryReader { geo in
                                            ForEach(midiEditorViewModel.fullStartNote...midiEditorViewModel.fullEndNote, id: \.self) { note in
                                                let yPosition = midiEditorViewModel.getYPositionForNote(note)
                                                Color.clear
                                                    .frame(width: 1, height: 1)
                                                    .position(x: 0, y: yPosition + midiEditorViewModel.getKeyHeight()/2)
                                                    .id(note)
                                            }
                                        }
                                    )
                                }
                                .frame(width: pianoRollWidth)
                                
                                // Grid area (horizontal scroll only)
                                ScrollViewReader { horizontalProxy in
                                    ScrollView(.horizontal, showsIndicators: true) {
                                        VStack(spacing: 0) {
                                            // Grid ruler
                                            GridRulerView(viewModel: midiEditorViewModel, midiClip: midiClip)
                                                .frame(height: controlsHeight)
                                                .border(themeManager.secondaryBorderColor, width: 0.5)
                                            
                                            // Grid content matching piano roll height - no padding or extra space
                                            GridContentView(viewModel: midiEditorViewModel, midiClip: midiClip)
                                                .frame(
                                                    width: midiClip != nil 
                                                        ? midiEditorViewModel.calculateGridWidth(clipDuration: midiClip!.duration)
                                                        : 600,
                                                    height: midiEditorViewModel.calculatePianoRollContentHeight()
                                                )
                                            // Grid content matching piano roll height - no padding or extra space
                                            GridContentView(
                                                viewModel: midiEditorViewModel, 
                                                clip: midiClip!,
                                                keyHeight: midiEditorViewModel.getKeyHeight(),
                                                pixelsPerBeat: midiEditorViewModel.pixelsPerBeat
                                            )
                                                .frame(
                                                    width: midiClip != nil 
                                                        ? midiEditorViewModel.calculateGridWidth(clipDuration: midiClip!.duration)
                                                        : 600,
                                                    height: midiEditorViewModel.calculatePianoRollContentHeight()
                                                )
                                            // Grid content matching piano roll height - no padding or extra space
                                            GridContentView(
                                                viewModel: midiEditorViewModel, 
                                                clip: midiClip!,
                                                keyHeight: midiEditorViewModel.getKeyHeight(),
                                                pixelsPerBeat: midiEditorViewModel.pixelsPerBeat
                                            )
                                                .frame(
                                                    width: midiClip != nil 
                                                        ? midiEditorViewModel.calculateGridWidth(clipDuration: midiClip!.duration)
                                                        : 600,
                                                    height: midiEditorViewModel.calculatePianoRollContentHeight()
                                                )
                                            // Grid ruler
                                            GridRulerView(viewModel: midiEditorViewModel, midiClip: midiClip)
                                                .frame(height: controlsHeight)
                                                .border(themeManager.secondaryBorderColor, width: 0.5)
                                            
                                            // Grid content with MIDI note display
                                            GridContentView(
                                                viewModel: midiEditorViewModel, 
                                                clip: midiClip!,
                                                keyHeight: midiEditorViewModel.getKeyHeight(),
                                                pixelsPerBeat: midiEditorViewModel.pixelsPerBeat
                                            )
                                                .frame(
                                                    width: midiClip != nil 
                                                        ? midiEditorViewModel.calculateGridWidth(clipDuration: midiClip!.duration)
                                                        : 600,
                                                    height: midiEditorViewModel.calculatePianoRollContentHeight()
                                                )
                                        }
                                    }
                                    .onChange(of: midiEditorViewModel.horizontalZoomLevel) { oldValue, newValue in
                                        // Calculate the beat to focus on after zoom
                                        let beatToFocus = Int(currentBeatPosition.rounded(.down))
                                        // Animate scroll to this beat
                                        withAnimation(.easeInOut(duration: 0.2)) {
                                            horizontalProxy.scrollTo("beat_\(beatToFocus)", anchor: .leading)
                                        }
                                    }
                                    // Track the current beat position based on scroll
                                    .background(
                                        GeometryReader { geo in
                                            Color.clear.preference(
                                                key: MidiEditorScrollOffsetPreferenceKey.self,
                                                value: geo.frame(in: .named("horizontalScroll")).minX
                                            )
                                        }
                                    )
                                    .coordinateSpace(name: "horizontalScroll")
                                    .onPreferenceChange(MidiEditorScrollOffsetPreferenceKey.self) { value in
                                        // Convert scroll offset to beat position
                                        // (Negative value means we've scrolled right)
                                        if midiEditorViewModel.pixelsPerBeat > 0 {
                                            currentBeatPosition = Double(abs(value)) / Double(midiEditorViewModel.pixelsPerBeat)
                                        }
                                    }
                                }
                            }
                            .border(themeManager.secondaryBorderColor, width: 0.5)
                        }
                        .frame(height: geometry.size.height - controlsHeight - velocityEditorHeight)
                        .onAppear {
                            // Set initial focus to the default centered note (typically C3)
                            DispatchQueue.main.asyncAfter(deadline: .now() + 0.2) {
                                // First initialize the centered note
                                let defaultNote = midiEditorViewModel.defaultCenteredNote
                                midiEditorViewModel.lastCenteredNote = defaultNote
                                midiEditorViewModel.updateHoveredKey(defaultNote)
                                
                                // Then scroll to that position, only if we haven't done so yet
                                if !hasScrolledToInitialPosition {
                                    withAnimation(.easeInOut(duration: 0.3)) {
                                        verticalProxy.scrollTo(defaultNote, anchor: .center)
                                        hasScrolledToInitialPosition = true
                                    }
                                }
                            }
                        }
                        .onChange(of: midiEditorViewModel.zoomLevel) { oldValue, newValue in
                            // When zoom changes, maintain scroll position at last centered note
                            if !isUserScrolling {
                                DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                                    let centerNote = midiEditorViewModel.lastCenteredNote
                                    withAnimation(.easeInOut(duration: 0.2)) {
                                        verticalProxy.scrollTo(centerNote, anchor: .center)
                                    }
                                }
                            }
                        }
                        .onChange(of: midiEditorViewModel.lastCenteredNote) { oldValue, newValue in
                            // When the user manually selects a new note (e.g., via keyboard shortcuts),
                            // scroll to center that note
                            if !isUserScrolling {
                                withAnimation(.easeInOut(duration: 0.2)) {
                                    verticalProxy.scrollTo(newValue, anchor: .center)
                                }
                            }
                        }
                        // Track scroll gesture to detect user interaction
                        .gesture(
                            DragGesture(minimumDistance: 5)
                                .onChanged { _ in
                                    isUserScrolling = true
                                }
                                .onEnded { _ in
                                    // Delay resetting to allow scrolling to finish
                                    DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
                                        isUserScrolling = false
                                    }
                                }
                        )
                    }
                    
                    // Velocity editor (extracted from PianoRoll)
                    HStack(spacing: 0) {
                        // Velocity label
                        ZStack(alignment: .leading) {
                            Rectangle()
                                .fill(themeManager.tertiaryBackgroundColor)
                            
                            Text("Velocity")
                                .font(.system(size: 8))
                                .fontWeight(.medium)
                                .foregroundColor(themeManager.primaryTextColor)
                                .padding(.leading, 4)
                        }
                        .frame(width: pianoRollWidth)
                        .border(themeManager.secondaryBorderColor, width: 0.5)
                        
                        // Max velocity indicator
                        ZStack(alignment: .trailing) {
                            Rectangle()
                                .fill(themeManager.tertiaryBackgroundColor)
                            
                            Text("127")
                                .font(.system(size: 11))
                                .foregroundColor(themeManager.primaryTextColor)
                                .padding(.trailing, 4)
                        }
                        .border(themeManager.secondaryBorderColor, width: 0.5)
                    }
                    .frame(height: velocityEditorHeight)
                }
                
                // Keyboard shortcuts layer (invisible)
                KeyboardShortcutsBottomSection()
                    .environmentObject(midiEditorViewModel)
                    .frame(width: 0, height: 0)
            }
        }
        .environmentObject(midiEditorViewModel)
    }
}

// Preference key for tracking scroll position
struct MidiEditorScrollOffsetPreferenceKey: PreferenceKey {
    static var defaultValue: CGFloat = 0
    static func reduce(value: inout CGFloat, nextValue: () -> CGFloat) {
        value = nextValue()
    }
}

#Preview {
    MidiClipEditorContainerView()
        .environmentObject(ThemeManager())
        .frame(width: 800, height: 600)
}
